/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.business;

import br.com.virtualrecipe.banco.BancoDeDados;
import br.com.virtualrecipe.business.interfaces.FarmaceuticoInterface;
import br.com.virtualrecipe.dominio.Farmaceutico;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 *
 * @author melis_000
 */
public class FarmaceuticoBusiness implements FarmaceuticoInterface{

    @Override
    public Farmaceutico cadastrarFarmaceutico(Farmaceutico farmaceutico) {
     BancoDeDados.farmaceuticoBDFake.add(farmaceutico);
        return farmaceutico;   
    }

    @Override
    public Farmaceutico buscarFarmaceutico(Integer id) {
         for (Farmaceutico farmaceutico: BancoDeDados.farmaceuticoBDFake){
            if(Objects.equals(farmaceutico.getid(), id)){
                return farmaceutico;/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.business;

import br.com.virtualrecipe.banco.BancoDeDados;
import br.com.virtualrecipe.business.interfaces.LaboratorioInterface;
import br.com.virtualrecipe.dominio.Laboratorio;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 *
 * @author melis_000
 */
public class LaboratorioBusiness implements LaboratorioInterface {

    @Override
    public Laboratorio cadastrarLaboratorio(Laboratorio laboratorio) {
        BancoDeDados.laboratoriBDFake.add(laboratorio);
        return laboratorio;
        
    }

    @Override
    public Laboratorio buscarLaboratorio(Integer id) {
         for (Laboratorio laboratorio: BancoDeDados.laboratoriBDFake){
            if(Objects.equals(laboratorio.getid(), id)){
                return laboratorio;
            }
        }return null;
    }

    @Override
    public List<Laboratorio> buscarLaboratorioPorNome(String nome) {
        List<Laboratorio> listaDeLaboratorioEncontrados = new ArrayList<Laboratorio>();        
        
        for(int i = 0; i< BancoDeDados.laboratoriBDFake.size();i++){
            Laboratorio laboratorio = BancoDeDados.laboratoriBDFake.get(i);
            if(laboratorio.getNomeLaboratorio().startsWith(nome)){
                listaDeLaboratorioEncontrados.add(laboratorio);
            }           
        }
        return listaDeLaboratorioEncontrados;
    }


    @Override
    public List<Laboratorio> buscarLaboratorioPorTelefone(Integer telefone) {
      for (Laboratorio laboratorio: BancoDeDados.laboratoriBDFake){
            if(Objects.equals(laboratorio.getTelefoneLaboratorio(), telefone)){
                return (List<Laboratorio>) laboratorio;
            }
        }return null;
    }

    @Override
    public List<Laboratorio> buscarTodosLaboratorios() {
        return BancoDeDados.laboratoriBDFake;
    }
    
    
}
            }
        }return null;
    }

    @Override
    public List<Farmaceutico> buscarFarmaceuticoPorNome(String nome) {
            List<Farmaceutico> listaDeFarmaceuticoEncontrados = new ArrayList<Farmaceutico>();        
        
        for(int i = 0; i< BancoDeDados.farmaceuticoBDFake.size();i++){
            Farmaceutico farmaceutico = BancoDeDados.farmaceuticoBDFake.get(i);
            if(farmaceutico.getNomeFarmaceutico().startsWith(nome)){
                listaDeFarmaceuticoEncontrados.add(farmaceutico);
            }           
        }
        return listaDeFarmaceuticoEncontrados;
    }



    @Override
    public List<Farmaceutico> buscarTodosFarmaceuticos() {
      return BancoDeDados.farmaceuticoBDFake;
    }    
    
}